#!python3


import sys
import asyncio

from langchain_core import messages
from langchain_core.language_models.chat_models import BaseChatModel

import typer
from langchain.prompts import ChatPromptTemplate

from loguru import logger
from rich import print
from rich.console import Console
import langchain_helper
from openai_wrapper import num_tokens_from_string
from pathlib import Path

# Disable Rich's line wrapping
console = Console(width=10000)


def should_skip_file(file_path: str) -> bool:
    """Check if a file should be skipped in the diff processing."""
    if "cursor-logs" in file_path:
        return True
    return False


def filter_diff_content(diff_output: str) -> str:
    """Filter out diffs from files that should be skipped."""
    lines = diff_output.splitlines()
    filtered_lines = []
    skip_current_file = False
    
    for line in lines:
        if line.startswith('diff --git'):
            # Extract file path from diff header
            file_path = line.split(' b/')[-1]
            skip_current_file = should_skip_file(file_path)
        
        if not skip_current_file:
            filtered_lines.append(line)
    
    return '\n'.join(filtered_lines)


def prompt_summarize_diff(diff_output, oneline=False):
    if oneline:
        instructions = """
You are an expert programmer, write a single-line commit message following the Conventional Commits format for a recent code change, which is presented as the output of git diff --staged.

The commit message should follow this format exactly:
type(scope): description

Where:
* Type must be one of: feat, fix, docs, style, refactor, perf, test, build, ci, chore
* Scope is optional and should be the main component being changed
* Description should be concise but informative, using imperative mood

Do not include any additional details, line breaks, or explanations. Just the single line.
"""
    else:
        instructions = """
You are an expert programmer, write a descriptive and informative commit message following the Conventional Commits format for a recent code change, which is presented as the output of git diff --staged.

## Instructions
* Start with a commit summary following Conventional Commits format: type(scope): description
    * Type must be one of: feat, fix, docs, style, refactor, perf, test, build, ci, chore
    * Scope is optional and should be the main component being changed, skip if only one file changed
    * Description should be concise but informative, using imperative mood
* Then add details in the body, separated by a blank line
* If you see bugs, start at the top of the file with
* When listing changes,
    * Put them in the order of importance
    * Use unnumbered lists as the user will want to reorder them
* If you see any of the following, skip them, or at most list them last as a single line
    * Changes to formatting/whitespace
    * Changes to imports
    * Changes to comments

Example:
feat(auth): add OAuth2 authentication flow

**BUGS:** (Only include if bugs are seen)
    * List bugs

**BREAKING CHANGE:** (include only for breaking changes)
    * List breaking changes

**Reason for change**
    * reason 1
    * reason 2
**Details**
    * details 1
    * details 2
"""
    return ChatPromptTemplate.from_messages(
        [
            messages.SystemMessage(content=instructions),
            messages.HumanMessage(content=diff_output),
        ]
    )


async def a_build_commit(oneline: bool = False, fast: bool = False):
    user_text = "".join(sys.stdin.readlines())
    # Filter out diffs from files that should be skipped
    filtered_text = filter_diff_content(user_text)

    if fast:
        # Use Llama only once for fast mode
        llms = [langchain_helper.get_model(llama=True)]
    elif oneline:
        # For oneline, just use Llama
        llms = [langchain_helper.get_model(llama=True)]
    else:
        llms = langchain_helper.get_models(openai=True, claude=True, google=True)
        tokens = num_tokens_from_string(filtered_text)
        if tokens < 8000:
            llms += [langchain_helper.get_model(llama=True)]
        if tokens < 4000:
            llms += [langchain_helper.get_model(llama=True)]

    def describe_diff(llm: BaseChatModel):
        return prompt_summarize_diff(filtered_text, oneline) | llm

    describe_diffs = await langchain_helper.async_run_on_llms(describe_diff, llms)

    for description, llm, duration in describe_diffs:
        print(description.content)
        print(
            f"\ncommit message generated by {langchain_helper.get_model_name(llm)} in {duration.total_seconds():.2f} seconds"
        )


console = Console()
app = typer.Typer(no_args_is_help=True)


@logger.catch()
def app_wrap_loguru():
    app()


@app.command()
def build_commit(
    trace: bool = False,
    oneline: bool = typer.Option(
        False,
        "--oneline",
        help="Generate a single-line commit message using Llama only",
    ),
    fast: bool = typer.Option(
        False, "--fast", help="Use Llama only once for faster processing"
    ),
):
    langchain_helper.langsmith_trace_if_requested(
        trace, lambda: asyncio.run(a_build_commit(oneline, fast))
    )


if __name__ == "__main__":
    app_wrap_loguru()
