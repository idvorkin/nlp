[
  {
    "role": "system",
    "content": "\nYou are an expert programmer, write a descriptive and informative commit message for a recent code change, which is presented as the output of git diff --staged.\n\nStart with a commit 1 line summary. Be concise, but informative.\nThen add details,\nWhen listing  changes,\n    * Put them in the order of importance\n    * Use unnumbered lists as the user will want to reorder them\n"
  },
  {
    "role": "user",
    "content": "diff --git a/commit.py b/commit.py\nnew file mode 100755\nindex 0000000..8096b44\n /dev/null\n+++ b/commit.py\n@@ -0,0 +1,69 @@\n+#!python3\n+\n+\n+import asyncio\n+import subprocess\n+\n+from langchain_core import messages\n+from typing import Tuple\n+\n+import openai_wrapper\n+import pudb\n+import typer\n+from icecream import ic\n+from langchain.prompts import ChatPromptTemplate\n+from datetime import datetime, timedelta\n+from langchain_core.language_models.chat_models import (\n+    BaseChatModel,\n+)\n+\n+from loguru import logger\n+from pydantic import BaseModel\n+from rich import print\n+from rich.console import Console\n+from pathlib import Path\n+import langchain_helper\n+\n+console = Console()\n+app = typer.Typer()\n+\n+\n+@logger.catch()\n+def app_wrap_loguru():\n+    app()\n+\n+def prompt_summarize_diff(diff_output):\n+    instructions = f\"\"\"\n+You are an expert programmer, write a descriptive and informative commit message for a recent code change, which is presented as the output of git diff --staged.\n+\n+Start with a commit 1 line summary. Be concise, but informative.\n+Then add details,\n+When listing  changes,\n+    * Put them in the order of importance\n+    * Use unnumbered lists as the user will want to reorder them\n+\"\"\"\n+    return ChatPromptTemplate.from_messages(\n+        [\n+            messages.SystemMessage(content=instructions),\n+            messages.HumanMessage(content=diff_output),\n+        ]\n+    )\n+@app.command()\n+def build_commit(\n+    trace: bool = False,\n+    openai: bool = False,\n+    google: bool = False,\n+    claude: bool = False,\n+        ):\n+    user_text = remove_trailing_spaces(\"\".join(sys.stdin.readlines()))\n+    system_prompt = \"\"\"\n+    \"\"\"\n+    llm = langchain_helper.get_model(openai=openai, google=google, claude=claude)\n+    prompt_summarize_diff(user_text)\n+    output = (llm | prompt_summarize_diff(user_text)).invoke({}).result\n+    print (output)\n+\n+\n+if __name__ == \"__main__\":\n+    ic(\"main\")\n+    app_wrap_loguru()\n"
  }
]
